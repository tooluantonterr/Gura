import nextcord
from modules import Permissions
from modules.ticket.TicketAssign import TicketAssignHandler
from modules.ticket.TicketUtils import TicketUtils

class TicketManageHandler:
    def __init__(self, categories: dict):
        self.categories = categories
        self.assign_handler = TicketAssignHandler()
        self.utils = TicketUtils()

    async def handle_manage(self, interaction: nextcord.Interaction):
        if not Permissions.has_permission_level(interaction.user, 1):
            return await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏.", ephemeral=True)
        
        user_is_senior_admin = Permissions.is_senior_admin(interaction.user)
        from modules.files import TicketMeta
        meta = TicketMeta.get_ticket(interaction.channel.id) or {}
        dm_allowed = (int(meta.get("dm_transcript", 1)) == 1)

        options = [
            nextcord.SelectOption(
                label="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                description="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–∏–∫–µ—Ç –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                emoji="üìÅ",
                value="move_category"
            ),
            nextcord.SelectOption(
                label="–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç",
                description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç",
                emoji="‚ö°",
                value="fast_reply"
            ),
            nextcord.SelectOption(
                label=("–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É transcript –≤ –õ–°" if dm_allowed else "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É transcript –≤ –õ–°"),
                description="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                emoji="‚úÖ",
                value="toggle_dm_transcript"
            ),
            nextcord.SelectOption(
                label="–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç",
                description="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ —Å–µ–±—è",
                emoji="üß©",
                value="assign_ticket_self"
            ),
        ]

        if user_is_senior_admin:
            options.insert(1, nextcord.SelectOption(
                label="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç",
                description="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°—Ç.–ê–¥–º–∏–Ω+)",
                emoji="üë§",
                value="assign_ticket"
            ))
            options.insert(2, nextcord.SelectOption(
                label="–î–æ–±–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç",
                description="–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–ª–∏–∞—Å (–°—Ç.–ê–¥–º–∏–Ω+)",
                emoji="üìù",
                value="add_fast_reply"
            ))

        select = nextcord.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="manage_ticket_select"
        )

        view = nextcord.ui.View(timeout=60)
        view.add_item(select)

        async def select_callback(inter: nextcord.Interaction):
            choice = select.values[0]
            
            try:
                if choice == "move_category":
                    await self._handle_move_category(inter)
                elif choice == "assign_ticket":
                    await self.assign_handler.handle_assign_ticket(inter)
                elif choice == "assign_ticket_self":
                    await self.assign_handler.handle_assign_ticket_self(inter)
                elif choice == "fast_reply":
                    await self._handle_fast_reply(inter)
                elif choice == "add_fast_reply":
                    await self._handle_add_fast_reply(inter)
                elif choice == "toggle_dm_transcript":
                    await self._handle_toggle_dm_transcript(inter)
                else:
                    await inter.response.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", ephemeral=True)
            except Exception as e:
                try:
                    await inter.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}", ephemeral=True)
                except:
                    pass

        select.callback = select_callback
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º:", view=view, ephemeral=True)

    async def _handle_move_category(self, interaction: nextcord.Interaction):
        options = [
            nextcord.SelectOption(label=label, description=data.get("description", ""))
            for label, data in self.categories.items()
        ]

        select = nextcord.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="move_ticket_select"
        )

        view = nextcord.ui.View(timeout=60)
        view.add_item(select)

        async def select_callback(inter: nextcord.Interaction):
            choice = select.values[0]
            config = self.categories[choice]

            new_category = inter.guild.get_channel(config["category_id"])
            if not isinstance(new_category, nextcord.CategoryChannel):
                return await inter.response.send_message("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ephemeral=True)

            await inter.channel.edit(category=new_category, reason=f"–ü–µ—Ä–µ–Ω–æ—Å —Ç–∏–∫–µ—Ç–∞ –≤ {choice}")
            
            try:
                from modules.Embeds import Embeds
                form = [
                    "–í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ",
                    "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã (–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é / –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ)",
                    "–ï—Å–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–∫-–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã (–ü–æ–¥–æ–π–¥—É—Ç –∫–∞–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —Ç–∞–∫ –∏ –≤–∏–¥–µ–æ)"
                ]
                async for message in inter.channel.history(limit=1, oldest_first=True):
                    if message.embeds:
                        new_embed = Embeds.ticket_welcome(choice, form, inter.user)
                        await message.edit(embed=new_embed)
                        break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed: {e}")
            
            await inter.response.send_message(f"‚úÖ –¢–∏–∫–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é **{choice}**", ephemeral=True)

        select.callback = select_callback
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:", view=view, ephemeral=True)

    async def _handle_fast_reply(self, interaction: nextcord.Interaction):
        from modules.files import AliasInteractions
        aliases = AliasInteractions.list_alias_names()
        if not aliases:
            return await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç.", ephemeral=True)

        options = [nextcord.SelectOption(label=name, value=name) for name in aliases]
        select = nextcord.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç",
            min_values=1, max_values=1, options=options
        )
        view = nextcord.ui.View(timeout=60)
        view.add_item(select)

        async def select_callback(inter: nextcord.Interaction):
            name = select.values[0]
            text = AliasInteractions.get_alias(name) or ""
            if not text:
                return await inter.response.send_message("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

            mention = ""
            if isinstance(inter.channel.topic, str):
                try:
                    parts = dict(item.split('=', 1) for item in inter.channel.topic.split('|') if '=' in item)
                    creator_id = int(parts.get('creator_id', '0'))
                    if creator_id:
                        mention = f"<@{creator_id}>\n"
                except Exception:
                    pass

            code_block = f"{mention}```{text}```"
            await inter.response.send_message(code_block, ephemeral=True)

        select.callback = select_callback
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç:",
            view=view, ephemeral=True
        )

    async def _handle_add_fast_reply(self, interaction: nextcord.Interaction):
        if not Permissions.is_senior_admin(interaction.user):
            return await interaction.response.send_message("‚ùå –ù–µ—Ç –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –°—Ç.–ê–¥–º–∏–Ω+.", ephemeral=True)

        modal = nextcord.ui.Modal(title="–î–æ–±–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç")
        name_input = nextcord.ui.TextInput(
            label="–ö–ª—é—á (alias)", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: rules_warning",
            required=True, max_length=64
        )
        text_input = nextcord.ui.TextInput(
            label="–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞", style=nextcord.TextInputStyle.paragraph,
            required=True, max_length=2000
        )
        modal.add_item(name_input)
        modal.add_item(text_input)

        async def modal_callback(modal_inter: nextcord.Interaction):
            from modules.files import AliasInteractions
            name = name_input.value.strip()
            text = text_input.value.strip()
            AliasInteractions.set_alias(name, text)
            await modal_inter.response.send_message(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", ephemeral=True)

        modal.callback = modal_callback
        await interaction.response.send_modal(modal)

    async def _handle_toggle_dm_transcript(self, interaction: nextcord.Interaction):
        from modules.files import TicketMeta
        meta = TicketMeta.get_ticket(interaction.channel.id) or {}
        current = int(meta.get("dm_transcript", 1)) == 1
        TicketMeta.update_ticket(interaction.channel.id, {"dm_transcript": 0 if current else 1})
        await interaction.response.send_message(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ transcript –≤ –õ–° —Ç–µ–ø–µ—Ä—å: {'–≤—ã–∫–ª—é—á–µ–Ω–∞' if current else '–≤–∫–ª—é—á–µ–Ω–∞'}.",
            ephemeral=True
        )
